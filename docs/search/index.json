[{"content":"Socket函数 函数原型：\nint socket(int family, int type, int protocol); 其中，family参数指明协议族/地址族，也被称为协议域，常用的有 AF_INET(PF_INET) 和 AF_INET6(PF_INET6)，第一个参数用PF_*。 type参数指明套接字类型，为某个常值，常用的有 SOCK_STREAM（流格式套接字/面向连接的套接字） 和 SOCK_DGRAM（数据报套接字/无连接的套接字）。 protocol参数为某个协议类型常值，常用的有 IPPROTO_TCP 和 IPPTOTO_UDP，分别表示 TCP 传输协议和 UDP 传输协议。当family和type可以推导出唯一协议时，可以设置protocol为0，系统会推导默认值。\nSOCK_STREAM 是一种可靠的、双向的通信数据流，数据可以准确无误地到达另一台计算机，如果损坏或丢失，可以重新发送。\n 数据在传输过程中不会消失； 数据是按照顺序传输的； 数据的发送和接收不是同步的（也称“不存在数据边界”）。  数据报套接字是一种不可靠的、不按顺序传递的、以追求速度为目的的套接字。\n 强调快速传输而非传输顺序； 传输的数据可能丢失也可能损毁； 限制每次传输的数据大小； 数据的发送和接收是同步的（也称“存在数据边界”）。 数据报套接字也使用 IP 协议作路由，但是它不使用 TCP 协议，而是使用 UDP 协议（User Datagram Protocol，用户数据报协议）。  对于地址127.0.0.1，它是一个特殊IP地址，表示本机地址。\nConnect函数 int connect(int sockfd, const struct sockaddr *servaddr, socklen_t addrlen); //Linux 其中， sockfd 是由socket函数返回的套接字描述符，servaddr是指向套接字地址结构的指针，addrlen是该结构的大小。套接字地址结构必须含有服务器的IP地址和端口号。 通常用sockaddr_in(IPV4)赋值IP地址和端口号，再转化为sockaddr，具体结构体变量如下：\nstruct sockaddr{ sa_family_t sin_family; //地址族（Address Family），也就是地址类型  char sa_data[14]; //IP地址和端口号 }; struct sockaddr_in{ sa_family_t sin_family; //地址族/协议族（Address Family），也就是地址类型  uint16_t sin_port; //16位的端口号  struct in_addr sin_addr; //32位IP地址  char sin_zero[8]; //不使用，一般用0填充 }; struct in_addr{ in_addr_t s_addr; //32位的IP地址 }; 注：connect调用前未必一定调用bind，内核会确定ip地址，并选择临时端口。 若TCP套接字，调用connect函数将会激发三次握手，在连接成功或者出错时返回，出错返回情况：\n 若TCP客户未收到SYN分节的响应，多次重发后无响应，返回ETIMEDOUT。 客户收到RST(表示复位)响应，表明计算机在指定端口上无对应进程等待与之连接，硬错误拒绝连接，返回ECONNREFUSED错误。 若TCP客户发出的SYN在中间的某个路由上引发“destination unreachable”(目的地不可达)ICMP错误，则认为是软错误。客户主机内核保存该消息，若在规定时间仍未成功，则返回EHOSTUNREACH(没有到主机的路由)或ENETUNREACH(网络不可达)。  bind函数 函数原型：\nint bind(int sock, struct sockaddr *addr, socklen_t addrlen); //Linux sock 为 socket 文件描述符，addr 为 sockaddr 结构体变量的指针，addrlen 为 addr 变量的大小，可由 sizeof() 计算得出。\n对于客户端未调用bind而言，内核可为套接字调用临时端口；但是服务器必须含有一个显示的端口为客户机所知。 注：该规则的例外是远程过程调用(RPC)。通常由内核为监听套接字选择临时端口，而该端口随后通过RPC端口映射器进行注册。客户端在connect之前，必须与端口映射器联系以获取临时端口，也适用于使用UDP的RPC服务器。\n对于IPv4来说，通配地址由常值INADDR_ANY来指定，其值一般为0。\n// IPv4 struct sockaddr_in address; address.sin_addr.s_addr = htonl(INADDR_ANY); //IPv6 struct sockaddr_in6 address; address.sin6_addr = in6addr_any; // 常值IN6ADDR_ANY_INIT 从bind函数返回的一个常见错误是EADDRINUSE(\u0026ldquo;Address already in use\u0026rdquo;)，地址已使用。\n参考程序：创建的套接字与IP地址127.0.0.1、端口1234绑定。\n//创建套接字 int serv_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); //创建sockaddr_in结构体变量 struct sockaddr_in serv_addr; memset(\u0026amp;serv_addr, 0, sizeof(serv_addr)); //每个字节都用0填充 serv_addr.sin_family = AF_INET; //使用IPv4地址 serv_addr.sin_addr.s_addr = inet_addr(\u0026#34;127.0.0.1\u0026#34;); //string转为int具体的IP地址 serv_addr.sin_port = htons(1234); //端口 //将套接字和IP、端口绑定 bind(serv_sock, (struct sockaddr*)\u0026amp;serv_addr, sizeof(serv_addr)); listen函数 函数原型：\nint listen(int sockfd, int backlog); //Linux 本函数通常应该在调用socket和bind之后，并在调用accept函数之前调用。\n内核为任何一个给定的监听套接字维护两个队列：\n 未完成连接队列：某个客户端发出到达服务器，服务器处在三次握手过程中，套接字处于SYN_RCVD状态。 已完成连接队列：每个已完成TCP三次握手的客户对应其中的一项，套接字处于ESTABLISHED状态。 两队列之和不超过backlog，但是不同的实现对应不同的解释；如果将 backlog 的值设置为 SOMAXCONN，就由系统来决定请求队列长度，这个值一般比较大。 当请求队列满时，就不再接收新的请求，对于 Linux，客户端会收到 ECONNREFUSED 错误。  accept函数 函数原型：\nint accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen); 当套接字处于监听状态时，可以通过 accept() 函数来接收客户端请求。cliaddr 和 addrlen返回已连接的对端进程(客户)的协议地址。 如果accept成功，返回由内核生成的已连接套接字描述符，代表与对应客户的TCP连接，当服务器完成任务时，相应的已连接套接字就被关闭。 而 sockfd为监听描述符，由socket创建，用于bind和listen的第一个参数的描述符，该描述符在服务器生命周期中一直存在。\nclose函数 int close(int sockfd); int close(int sockfd, int howto); close函数关闭套接字，终止TCP连接(并发时不能关闭)，引用计数 - 1。 shutdown函数关闭TCP连接，SHUT_RD关闭读，SHUT_WR关闭写，SHUT_RDWR读写均关闭。\ngetsockname 和 gepeername函数 int getsockname(int sockfd, struct sockadd *localaddr, socklen_t *addrlen);// 本地协议地址，监听套接字描述符 int getpeername(int sockfd, struct sockadd *peeraddr, socklen_t *addrlen);// 外地协议地址，已连接套接字描述符 getsockopt 和 setsockopt 函数 函数原型：\nint getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen); int setsockopt(int sockfd, int level, int optname, void *optval, socklen_t optlen); 设定套接字属性。\n","date":"2021-10-23T18:58:46+08:00","permalink":"https://jdongchen.github.io/blog/%E5%A5%97%E6%8E%A5%E5%AD%97/","title":"套接字"}]